{"version":3,"sources":["Components/Default/DefaultHeader/DefaultHeader.jsx","Components/Default/DefaultAlgorithmTitle/DefaultAlgorithmTitle.jsx","Components/PointDistribution/PointDistributionMenu/PointDistributionMenu.jsx","Algorithms/Random.jsx","Algorithms/RandomPoints.jsx","Algorithms/PoissonDisc.jsx","Components/PointDistribution/PointDistributionMap/PointDistributionMap.jsx","Algorithms/EvenlySpacedRandomPoints.jsx","Components/PointDistribution/PointDistribution.jsx","App.js","index.js"],"names":["DefaultHeader","className","href","Component","DefaultAlgorithmTitle","this","props","title","subtitle","PointDistributionMenu","state","algTitle","algDesc","link","link_title","algoId","algorightmInfo","description","length","setState","algLink","target","rel","id","Slider","defaultValue","min","step","max","marks","value","label","onChange","e","onMapSizeChanged","onAlgorithmChanged","updateAlgorithmDescription","Switch","checked","onIsAnimateChanged","defaultProps","OnSettingsChanged","getRandom","Math","random","generateRandomPoints","mapWidth","mapHeight","pointCount","points","i","push","console","log","addPoint","pointList","activePointList","grid","cellSize","point","floor","isNearOtherPoints","r","gridCell","minCell","maxCell","j","currCell","dx","dy","CANVAS_ID","HIGHLIGHT_COLOR","PointDistributionMap","drawInterval","algorithm","mapSize","isAnimate","algorithmId","gridWidth","ceil","gridHeight","x","y","newPoint","generateEvenlySpacedRandomPoints","k","activePointIds","SQRT1_2","Array","from","idid","angle","PI","radius","cos","sin","pop","generatePoissonDiscPoints","canvas","pointSize","lineWidth","delay","sizeModifier","getSizeRatio","ctx","getContext","strokeStyle","clearRect","clientWidth","clientHeight","clearInterval","thisClass","setInterval","drawPoint","beginPath","arc","stroke","document","getElementById","generatePoints","drawPointsAnimated","drawPoints","canvasParent","parentElement","width","offsetWidth","height","offsetHeight","updateCanvasSize","componentDidUpdate","window","addEventListener","onWindowResize","removeEventListener","onClick","PointDistribution","newMapSize","newAlgotihm","newIsAnimate","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7f0ffd26.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./DefaultHeader.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nexport default class DefaultHeader extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"default-header\">\r\n        <nav className=\"navbar\">\r\n          <div className=\"container-fluid\">\r\n            <a className=\"portfolio-link\" href=\"http://www.tom.ille-web.de\">\r\n              Back to Portfolio\r\n            </a>\r\n          </div>\r\n        </nav>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./DefaultAlgorithmTitle.css\";\r\n\r\nexport default class DefaultAlgorithmTitle extends Component {\r\n  render() {\r\n    const { title, subtitle } = this.props;\r\n    return (\r\n      <div className=\"default-algorithm-title col-12 p-3\">\r\n        <h1>{title}</h1>\r\n        <h3>{subtitle}</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/*<Typography id=\"non-linear-slider\" variant=\"h3\" gutterBottom>\r\n{title}\r\n</Typography>\r\n<Typography id=\"non-linear-slider\" variant=\"subtitle1\" gutterBottom>\r\n{subtitle}\r\n</Typography>*/\r\n","import React, { Component } from \"react\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nimport \"./PointDistributionMenu.css\";\r\n\r\nexport default class PointDistributionMenu extends Component {\r\n  state = {\r\n    algTitle: \"Fully Random Scatter\",\r\n    algDesc:\r\n      \"The points are randomly scattered across the image. The scatter is very uneven. There are large clumps of points and areas of very low point density.\",\r\n    link: \"\",\r\n    link_title: \"\",\r\n  };\r\n\r\n  updateAlgorithmDescription(algoId) {\r\n    const algorightmInfo = [\r\n      {\r\n        title: \"Fully Random Scatter\",\r\n        description:\r\n          \"The points are randomly scattered across the image. The scatter is very uneven. There are large clumps of points and areas of very low point density.\",\r\n      },\r\n      {\r\n        title: \"Randomized Grid\",\r\n        description:\r\n          \"My Custom Algorithm. The image is discretized into a uniform grid. One point gets randomly placed within each cell. This scatter is overall much more even than the random scatter.\" +\r\n          \" Points can still be generated close together in clumps of up to four points.\",\r\n      },\r\n      {\r\n        title: \"Poisson-Disc\",\r\n        link: \"https://www.jasondavies.com/poisson-disc/\",\r\n        link_title: \"Based on Jason Davies' implementation\",\r\n        description:\r\n          \"Poisson-Disc ensures a minimal distance between each point. Whenever a new point is considered, it is checked against its neighbours to ensure the minimal distance.\" +\r\n          \" To reduce the computational cost a grid is used in the background. New points then have to only be checked\" +\r\n          \" against close grid cells. This method produces a very even scatter without any clumps.\",\r\n      },\r\n    ];\r\n\r\n    if (algoId >= algorightmInfo.length) return;\r\n\r\n    this.setState({\r\n      algTitle: algorightmInfo[algoId].title,\r\n      algDesc: algorightmInfo[algoId].description,\r\n      link: algorightmInfo[algoId].link,\r\n      link_title: algorightmInfo[algoId].link_title,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const algorithmMarks = [\r\n      { value: 0, label: \"Random\" },\r\n      { value: 1, label: \"Random Grid\" },\r\n      { value: 2, label: \"Poisson-Disc\" },\r\n    ];\r\n\r\n    const sizeMarks = [\r\n      { value: 0, label: \"Small\" },\r\n      { value: 1, label: \"Medium\" },\r\n      { value: 2, label: \"Large\" },\r\n    ];\r\n\r\n    var algLink;\r\n    if (this.state.link && this.state.link_title) {\r\n      algLink = (\r\n        <div className=\"algorithm-link\">\r\n          <a href={this.state.link} target=\"_blank\" rel=\"noreferrer\">\r\n            {this.state.link_title}\r\n          </a>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"alg-menu\">\r\n        <h2 id=\"settings-heading\">Settings</h2>\r\n        <hr className=\"settings-menu\" />\r\n        <div className=\"settings-slider\">\r\n          <h4>Map Size</h4>\r\n          <Slider\r\n            defaultValue={0}\r\n            min={0}\r\n            step={1}\r\n            max={2}\r\n            marks={sizeMarks}\r\n            className=\"col-8\"\r\n            onChange={(e, value) => this.props.onMapSizeChanged(value)}\r\n          />\r\n        </div>\r\n        <div className=\"settings-slider\">\r\n          <h4>Algorithm</h4>\r\n          <Slider\r\n            min={0}\r\n            step={1}\r\n            max={2}\r\n            marks={algorithmMarks}\r\n            className=\"col-8\"\r\n            onChange={(e, value) => {\r\n              this.props.onAlgorithmChanged(value);\r\n              this.updateAlgorithmDescription(value);\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"\">\r\n          <h4>Animate</h4>\r\n          <Switch onChange={(e, checked) => this.props.onIsAnimateChanged(checked)} />\r\n        </div>\r\n        <hr className=\"settings-menu\" />\r\n        <div className=\"alg-description\">\r\n          <h6>{this.state.algTitle}</h6>\r\n          {algLink}\r\n          <div>{this.state.algDesc}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPointDistributionMenu.defaultProps = {\r\n  OnSettingsChanged: null,\r\n};\r\n","export const getRandom = (min, max) => {\r\n  return Math.random() * (max - min) + min;\r\n};\r\n","import { getRandom } from \"./Random\";\r\n\r\nexport const generateRandomPoints = (mapWidth, mapHeight, pointCount) => {\r\n  const points = [];\r\n  // set points\r\n  for (let i = 0; i < pointCount; i++) {\r\n    points.push([getRandom(0, mapWidth), getRandom(0, mapHeight)]);\r\n  }\r\n  console.log(pointCount + \" random points generated\");\r\n  return points;\r\n};\r\n","import { getRandom } from \"./Random\";\r\n\r\n// Based on https://www.jasondavies.com/poisson-disc/\r\n\r\nexport const generatePoissonDiscPoints = (mapWidth, mapHeight, r, k) => {\r\n  const activePointIds = [];\r\n  const points = [];\r\n  const cellSize = r * Math.SQRT1_2;\r\n  const gridWidth = Math.ceil(mapWidth / cellSize);\r\n  const gridHeight = Math.ceil(mapHeight / cellSize);\r\n  const grid = Array.from(Array(gridWidth), () => new Array(gridHeight));\r\n\r\n  addPoint(points, activePointIds, grid, cellSize, [getRandom(0, mapWidth), getRandom(0, mapHeight)]);\r\n\r\n  while (activePointIds.length > 0) {\r\n    // grab random point\r\n\r\n    const idid = Math.floor(getRandom(0, activePointIds.length - 1)); // great name dude\r\n    const pointId = activePointIds[idid];\r\n    const point = points[pointId];\r\n    for (let i = 0; i < k; i++) {\r\n      const angle = 2 * Math.PI * Math.random();\r\n      const radius = getRandom(r, 2 * r);\r\n      const x = point[0] + radius * Math.cos(angle);\r\n      const y = point[1] + radius * Math.sin(angle);\r\n      if (x >= 0 && y >= 0 && x < mapWidth && y < mapHeight && !isNearOtherPoints(grid, cellSize, [x, y], r)) {\r\n        addPoint(points, activePointIds, grid, cellSize, [x, y]);\r\n        break;\r\n      }\r\n\r\n      //remove point from active list if none of 'k' points could be placed\r\n      if (i === k - 1) {\r\n        activePointIds[idid] = activePointIds[activePointIds.length - 1];\r\n        activePointIds.pop();\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log(points.length + \" poisson-disc points generated\");\r\n  return points;\r\n};\r\n\r\nconst addPoint = (pointList, activePointList, grid, cellSize, point) => {\r\n  pointList.push(point);\r\n  activePointList.push(pointList.length - 1);\r\n  grid[Math.floor(point[0] / cellSize)][Math.floor(point[1] / cellSize)] = point;\r\n};\r\n\r\n// Determines whether a given point is within range of an occupied grid cell.\r\nconst isNearOtherPoints = (grid, cellSize, point, r) => {\r\n  const gridCell = [Math.floor(point[0] / cellSize), Math.floor(point[1] / cellSize)];\r\n  const minCell = [Math.max(0, gridCell[0] - 2), Math.max(0, gridCell[1] - 2)];\r\n  const maxCell = [Math.min(grid.length, gridCell[0] + 2), Math.min(grid[0].length, gridCell[1] + 2)];\r\n\r\n  // step through vinicity of the current gridcell\r\n  for (let i = minCell[0]; i < maxCell[0]; i++) {\r\n    for (let j = minCell[1]; j < maxCell[1]; j++) {\r\n      const currCell = grid[i][j];\r\n      if (currCell) {\r\n        const dx = currCell[0] - point[0];\r\n        const dy = currCell[1] - point[1];\r\n        if (dx * dx + dy * dy <= r * r) return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport { generateRandomPoints } from \"../../../Algorithms/RandomPoints\";\r\nimport { generateEvenlySpacedRandomPoints } from \"../../../Algorithms/EvenlySpacedRandomPoints\";\r\nimport { generatePoissonDiscPoints } from \"../../../Algorithms/PoissonDisc\";\r\n\r\nimport \"./PointDistributionMap.css\";\r\n\r\nconst CANVAS_ID = \"canvas\";\r\nconst POINT_DENSITY = 0.05;\r\nconst POINT_SIZE_MULTIPLIER = 0.75;\r\nconst LINE_WIDTH_MULTIPLIER = 0.5;\r\nconst DRAW_DELAY = 5;\r\nconst POISSON_DISC_RADIUS = 4;\r\nconst GRID_CELL_SIZE = 6;\r\nconst HIGHLIGHT_COLOR = \"#2F528F\";\r\n\r\nexport default class PointDistributionMap extends Component {\r\n  drawInterval = null;\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      algorithm: 0,\r\n      mapSize: 1,\r\n      isAnimate: false,\r\n    };\r\n  }\r\n\r\n  getSizeRatio(mapSize) {\r\n    switch (mapSize) {\r\n      case 0:\r\n      default:\r\n        return 10;\r\n      case 1:\r\n        return 4;\r\n      case 2:\r\n        return 2;\r\n    }\r\n  }\r\n\r\n  generatePoints(algorithmId, mapWidth, mapHeight) {\r\n    const pointCount = Math.floor(mapWidth * mapHeight * POINT_DENSITY);\r\n    switch (algorithmId) {\r\n      case 1:\r\n        return generateEvenlySpacedRandomPoints(mapWidth, mapHeight, GRID_CELL_SIZE);\r\n      case 2:\r\n        return generatePoissonDiscPoints(mapWidth, mapHeight, POISSON_DISC_RADIUS, 10);\r\n      case 0:\r\n        return generateRandomPoints(mapWidth, mapHeight, pointCount);\r\n      default:\r\n        return generateRandomPoints(mapWidth, mapHeight, pointCount);\r\n    }\r\n  }\r\n\r\n  drawPointsAnimated(pointList, canvas, pointSize, lineWidth, delay) {\r\n    const sizeModifier = this.getSizeRatio(this.props.mapSize);\r\n    var ctx = canvas.getContext(\"2d\");\r\n    ctx.strokeStyle = HIGHLIGHT_COLOR;\r\n    ctx.lineWidth = lineWidth;\r\n    // clean up previous render\r\n    ctx.clearRect(0, 0, canvas.clientWidth, canvas.clientHeight);\r\n    clearInterval(this.drawInterval);\r\n    var i = 0;\r\n    // setup \"this\" for interval func\r\n    var thisClass = this;\r\n    this.drawInterval = setInterval(function () {\r\n      // cancel inteval when all points are drawn\r\n      if (i > pointList.length - 1) {\r\n        clearInterval(thisClass.drawInterval);\r\n      } else {\r\n        // convert point coords from grid space to canvas space and draw\r\n        const point = [pointList[i][0] * sizeModifier, pointList[i][1] * sizeModifier];\r\n        thisClass.drawPoint(canvas, point, pointSize, lineWidth);\r\n        i++;\r\n      }\r\n    }, delay);\r\n  }\r\n\r\n  drawPoints(pointList, canvas, pointSize, lineWidth) {\r\n    const sizeModifier = this.getSizeRatio(this.props.mapSize);\r\n    var ctx = canvas.getContext(\"2d\");\r\n    ctx.strokeStyle = HIGHLIGHT_COLOR;\r\n    ctx.lineWidth = lineWidth;\r\n    // clean up previous render\r\n    ctx.clearRect(0, 0, canvas.clientWidth, canvas.clientHeight);\r\n    clearInterval(this.drawInterval);\r\n    // start new render\r\n    for (let i = 0; i < pointList.length; i++) {\r\n      // convert point coords from grid space to canvas space and draw\r\n      const point = [pointList[i][0] * sizeModifier, pointList[i][1] * sizeModifier];\r\n      this.drawPoint(canvas, point, pointSize, lineWidth);\r\n    }\r\n  }\r\n\r\n  drawPoint(canvas, point, pointSize, lineWidth) {\r\n    var ctx = canvas.getContext(\"2d\");\r\n    // ignore points that are too close to the edges (looks more neat)\r\n    if (\r\n      point[0] - pointSize - lineWidth > 0 &&\r\n      point[0] + pointSize + lineWidth < canvas.clientWidth &&\r\n      point[1] - pointSize - lineWidth > 0 &&\r\n      point[1] + pointSize + lineWidth < canvas.clientHeight\r\n    ) {\r\n      //draw point\r\n      ctx.beginPath();\r\n      ctx.arc(point[0], point[1], pointSize, 0, Math.PI * 2);\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const canvas = document.getElementById(CANVAS_ID);\r\n    const sizeModifier = this.getSizeRatio(this.props.mapSize);\r\n    const mapWidth = Math.floor(canvas.clientWidth / sizeModifier);\r\n    const mapHeight = Math.floor(canvas.clientHeight / sizeModifier);\r\n    console.log(\"mapsize: \" + this.props.mapSize + \", algo: \" + this.props.algorithm + \", isAnimate:\" + this.props.isAnimate);\r\n    console.log(\"Map: \" + mapWidth + \"x\" + mapHeight);\r\n    const points = this.generatePoints(this.props.algorithm, mapWidth, mapHeight);\r\n    if (this.props.isAnimate) {\r\n      this.drawPointsAnimated(points, canvas, POINT_SIZE_MULTIPLIER * sizeModifier, LINE_WIDTH_MULTIPLIER * sizeModifier, DRAW_DELAY);\r\n    } else {\r\n      this.drawPoints(points, canvas, POINT_SIZE_MULTIPLIER * sizeModifier, LINE_WIDTH_MULTIPLIER * sizeModifier);\r\n    }\r\n  }\r\n\r\n  updateCanvasSize() {\r\n    const canvas = document.getElementById(CANVAS_ID);\r\n    const canvasParent = document.getElementById(CANVAS_ID).parentElement;\r\n    canvas.width = canvasParent.offsetWidth; //padding + border\r\n    canvas.height = canvasParent.offsetHeight; //padding + border\r\n  }\r\n\r\n  onWindowResize() {\r\n    this.updateCanvasSize();\r\n    this.componentDidUpdate();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", () => this.onWindowResize());\r\n    this.updateCanvasSize();\r\n    this.componentDidUpdate();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", () => this.onWindowResize());\r\n    clearInterval(this.drawInterval);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-alg-element\">\r\n        <div className=\"point-distribution-map\">\r\n          <canvas id={CANVAS_ID} onClick={() => this.componentDidUpdate()} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPointDistributionMap.defaultProps = {\r\n  mapSize: 0,\r\n  algorithm: 0,\r\n};\r\n","import { getRandom } from \"./Random\";\r\n\r\nexport const generateEvenlySpacedRandomPoints = (mapWidth, mapHeight, cellSize) => {\r\n  const points = [];\r\n\r\n  const gridWidth = Math.ceil(mapWidth / cellSize);\r\n  const gridHeight = Math.ceil(mapHeight / cellSize);\r\n\r\n  for (let x = 0; x < gridWidth; x++) {\r\n    for (let y = 0; y < gridHeight; y++) {\r\n      const newPoint = [getRandom(x * cellSize, (x + 1) * cellSize), getRandom(y * cellSize, (y + 1) * cellSize)];\r\n      if ((x == gridWidth - 1 || y == gridHeight - 1) && (newPoint[0] > mapWidth || newPoint[1] > mapHeight)) continue;\r\n      points.push(newPoint);\r\n    }\r\n  }\r\n\r\n  console.log(points.length + \" points generated with even spacing\");\r\n  return points;\r\n};\r\n","import React, { Component } from \"react\";\r\nimport PointDistributionMenu from \"./PointDistributionMenu/PointDistributionMenu.jsx\";\r\nimport PointDistributionMap from \"./PointDistributionMap/PointDistributionMap.jsx\";\r\nimport \"./PointDistribution.css\";\r\n\r\nexport default class PointDistribution extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      mapSize: 0,\r\n      algorithm: 0,\r\n      isAnimate: false,\r\n    };\r\n  }\r\n\r\n  onMapSizeChanged(newMapSize) {\r\n    if (newMapSize != this.state.mapSize) {\r\n      this.setState({ mapSize: newMapSize });\r\n    }\r\n  }\r\n\r\n  onAlgorithmChanged(newAlgotihm) {\r\n    if (newAlgotihm != this.state.algorithm) {\r\n      this.setState({ algorithm: newAlgotihm });\r\n    }\r\n  }\r\n\r\n  onIsAnimateChanged(newIsAnimate) {\r\n    if (newIsAnimate != this.state.isAnimate) {\r\n      this.setState({ isAnimate: newIsAnimate });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={\"alg-body\"}>\r\n        <PointDistributionMap mapSize={this.state.mapSize} algorithm={this.state.algorithm} isAnimate={this.state.isAnimate} />\r\n        <PointDistributionMenu\r\n          onMapSizeChanged={(newMapSize) => this.onMapSizeChanged(newMapSize)}\r\n          onAlgorithmChanged={(newAlgotihm) => this.onAlgorithmChanged(newAlgotihm)}\r\n          onIsAnimateChanged={(newIsAnimate) => this.onIsAnimateChanged(newIsAnimate)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import DefaultHeader from \"./Components/Default/DefaultHeader/DefaultHeader.jsx\";\r\nimport DefaultAlgorithmTitle from \"./Components/Default/DefaultAlgorithmTitle/DefaultAlgorithmTitle.jsx\";\r\nimport PointDistribution from \"./Components/PointDistribution/PointDistribution.jsx\";\r\n// css\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <DefaultHeader />\r\n      <DefaultAlgorithmTitle title=\"Algorithms for scattering 2D Points\" />\r\n      <PointDistribution />\r\n      <div className=\"container-fluid\"></div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}